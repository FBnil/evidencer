# Pretty handy when you do not match anything to run, then evidencer gives you a warning.
WARNINGS=1

# Defaults can be overriden

#CFGDIR=cfg
#SCRIPTS=scripts
#SERVERS=servers
#RESULTS=results

# This is for big lists to run in less time by grouping, but be careful that the OUTPUTDIR can only be
# one, so this means that you mix output from another script into this single output.
# It might be what you want (for example: you do not have any pre/post scripts), it might not.
GROUP=0
FOLD=0

# long entries can be split across multiple lines by using the \
MANAMANA= tu tu\
 rururu


# Colors. Get more from: https://gist.github.com/iamnewton/8754917
BOLD=\033[1m
NORM=\033[0m
REVB=\e[7;1m
REDH=\e[1;31m
GRNH=\e[1;32m
UNDH=\e[4;37m

# We add sleeps to simulate traffic, remove them once you start working with evidencer.
RUN_START=echo "1 %{UNDH}%{BOLD}STARTING%{NORM} %{NOW} from ${PWD}";sleep 1
RUN_BEGIN=echo "2 Begin with: %{BOLD}%{RUNNAME}%{NORM}";sleep 1
RUN_END=echo "3 End with: %{BOLD}%{RUNNAME}%{NORM}";sleep 1
RUN_FAIL=echo "%{REDH}ERROR:%{NORM} %{BOLD} RUN script did not exit correctly%{NORM}. ERRORCODE=(%{ERRORCODE})"
RUN_ABORT=echo "%{REDH}ABEND(%{ERRORCODE}):%{ABORTMSG}%{NORM}"
RUN_FINISH=echo "We are done and the total errors is ${TOTALERRORS} and last ERRORCODE is: ${ERRORCODE} and we took ${TOTALTIME} seconds. %{NOW} ${HOME}"


# These variables %{} will be evaluated and filled in BEFORE starting the script
YMDHHMM=%{YEAR}-%{MONTH}-%{DAY}_%{HH}%{MM}
# These variables ${} will be evaluated at running/printing time.
NOW=${YEAR}-${MONTH}-${DAY}_${HH}:${MM}:${SS}

# Add some structure to the scripts
OUTPUTDIR=%{RUNRESULTSDIR}/%{RUNNAME}
OUTPUTLOG=%{OUTPUTDIR}-%{YMDHHMM}.log
STARTFILE=%{OUTPUTDIR}.run

# Define names of pre and post scripts (must be runnable)
PRE_PROCESS_SCRIPT=%{RUNSCRIPTSDIR}/%{RUNNAME}^pre
POST_PROCESS_SCRIPT=%{RUNSCRIPTSDIR}/%{RUNNAME}^post

# First we run RUN_PRE
RUN_PRE= [ -d "%{OUTPUTDIR}" ] || mkdir "%{OUTPUTDIR}"; touch "%{STARTFILE}";\
 if [ -f "%{PRE_PROCESS_SCRIPT}" ];then "%{PRE_PROCESS_SCRIPT}" "%{RUNSERVERFQ}" "%{RUNSCRIPTSDIR}";fi
 
# Then, if we do not have an argument, we run RUN
RUN="%{BASEDIR}"/bin/ssh-batch --no-info --bg-log-dir "%{OUTPUTDIR}" "%{RUNSERVERFQ}" -- "%{RUNSCRIPTFQ}" > "%{OUTPUTLOG}"
# If we do have an argument, run this instead
RUN_ARG="%{BASEDIR}"/bin/ssh-batch --no-info --bg-log-dir "%{OUTPUTDIR}" "%{RUNSERVERFQ}" -- "%{RUNSCRIPTFQ}" --- "%{ARG}" > "%{OUTPUTLOG}"

# Run this after RUN finished
RUN_POST= if [ -f "%{POST_PROCESS_SCRIPT}" ];then "%{POST_PROCESS_SCRIPT}" "%{OUTPUTLOG}" "%{RUNSERVERFQ}" "%{OUTPUTDIR}";else\
 if [ -x "%{RUNSCRIPTSDIR}/POST" ];then "%{RUNSCRIPTSDIR}/POST" "%{OUTPUTLOG}" "%{RUNSERVERFQ}" "%{OUTPUTDIR}";fi;fi

# some scripts do not like to be Grouped/Folded. Use the -r to redefine it, like so:
# ./evidencer -r SEPARATE script1=serverlist1 script2=serverlist2
ALIAS SEPARATE=GROUP=0{,}FOLD=0

# If you want to just run the RUN_POST script (because that processes your script output), then this nests Aliases:
ALIAS NOARG=RUN_ARG=
ALIAS NOPRE=RUN_PRE=
ALIAS NORUN=RUN=
ALIAS ~show=NORUN,NOPRE,NOARG
# The four lines could have been replaced by:
# ALIAS ~show2=RUN_ARG={,}RUN_PRE={,}RUN=
# Be careful with aliases, if your scripts contain a substring equal to the alias (case sensitive), then it's replaced!
# use a leading / or UPPERCASE for aliases and lowercase for scripts.

# Example of an alias for the commandline (so it does not require the -r)
# This example runs test3 on VM-PR and then get.the.knife with the newest servers file (# is an alias to that)
ALIAS /go=&FOLD=0 &GROUP=0 &RUN= &ARGV="SAD_SAD" test3=VM-PR  &RUN= get.the.knife=# 






