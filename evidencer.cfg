# Pretty handy when you do not match anything to run, then evidencer gives you a warning.
WARNINGS=1

# Also copy evidencer.cfg and evidencer when creating a new suit when running ./evidencer -Cs myNewSuit 
SUIT_LINK=1
SUIT_CFG=1

# Defaults can be overriden

#CFGDIR=cfg
#SCRIPTS=scripts
#SERVERS=servers
#RESULTS=results

# This is for big lists to run in less time by grouping, but be careful that the OUTPUTDIR can only be
# one, so this means that you mix output from another script into this single output.
# It might be what you want (for example: you do not have any pre/post scripts), it might not.
GROUP=1
FOLD=0

# long entries can be split across multiple lines by using the \ so this is the same as: MANAMANA= tu tu rururu
MANAMANA= tu tu\
 rururu

# LightSalmon3 (137). Get more from: https://jonasjacek.github.io/colors/
# Unused letters are (caps only): DEFHJMQSTVX_
C:S=\033[38;5;137m

# Colors. Get more from: https://gist.github.com/iamnewton/8754917
# BOLD=\033[1m  # use: %{C:B} instead
# NORM=\033[0m  # use: %{C:N} instead
# In fact, here is how to list what is available:  grep C: ./evidencer


# We add sleeps to simulate traffic, remove them once you start working with evidencer.
RUN_START=echo "%{C:B}1%{C:N} %{C:U}%{C:B}STARTING%{C:N} %{C:137}%{NOW}%{C:N} from ${PWD}";sleep 1
RUN_BEGIN=echo "%{C:B}2%{C:N}  Begin with: %{C:B}%{RUNNAME}%{C:N}";sleep 1
RUN_END=echo "3 End with: %{C:B}%{RUNNAME}%{C:N}";sleep 1
RUN_FAIL=echo "%{C:R}ERROR:%{C:N} %{C:B} RUN script did not exit correctly%{C:N}. ERRORCODE=(%{ERRORCODE})"
RUN_ABORT=echo "%{C:R}ABEND(%{ERRORCODE}):%{ABORTMSG}%{C:N}"
RUN_FINISH=echo "We are done and the total errors is ${TOTALERRORS} and last ERRORCODE is: ${ERRORCODE} and we took ${TOTALTIME} seconds. %{C:137}%{NOW}%{C:}  %{C:137}${HOME}%{C:N}"


# These variables %{} will be evaluated and filled in BEFORE starting the script
YMDHHMM=%{YEAR}-%{MONTH}-%{DAY}_%{HH}%{MM}
# These variables ${} will be evaluated at running/printing time.
NOW=${YEAR}-${MONTH}-${DAY}_${HH}:${MM}:${SS}

# Add some structure to the scripts
OUTPUTDIR=%{RUNRESULTSDIR}/%{RUNNAME}
OUTPUTLOG=%{OUTPUTDIR}-%{YMDHHMM}.log
STARTFILE=%{OUTPUTDIR}.run

# Define names of pre and post scripts (must be runnable)
PRE_PROCESS_SCRIPT=%{RUNSCRIPTSDIR}/%{RUNNAME}^pre
POST_PROCESS_SCRIPT=%{RUNSCRIPTSDIR}/%{RUNNAME}^post

# To manipulate the verbosity of ssh-batch
SILENCE=


# First we run RUN_PRE
RUN_PRE= [ -d "%{OUTPUTDIR}" ] || mkdir "%{OUTPUTDIR}"; touch "%{STARTFILE}";\
 if [ -f "%{PRE_PROCESS_SCRIPT}" ];then "%{PRE_PROCESS_SCRIPT}" "%{RUNSERVERFQ}" "%{RUNSCRIPTSDIR}";fi
 
# Then, if we do not have an argument, we run RUN
RUN=%{BASEDIR}/bin/ssh-batch ${SILENCE} --no-info --bg-log-dir "%{OUTPUTDIR}" %{RUNSERVERFQ} -- %{RUNSCRIPTFQ} > "%{OUTPUTLOG}"
# If we do have an argument, run this instead
RUN_ARG=%{BASEDIR}/bin/ssh-batch ${SILENCE} --no-info --bg-log-dir "%{OUTPUTDIR}" %{RUNSERVERFQ} -- %{RUNSCRIPTFQ} --- %{ARG} > "%{OUTPUTLOG}"

# Run this after RUN finished
RUN_POST= if [ -f "%{POST_PROCESS_SCRIPT}" ];then "%{POST_PROCESS_SCRIPT}" "%{OUTPUTLOG}" "%{RUNSERVERFQ}" "%{OUTPUTDIR}";else\
 if [ -x "%{RUNSCRIPTSDIR}/POST" ];then "%{RUNSCRIPTSDIR}/POST" "%{OUTPUTLOG}" "%{RUNSERVERFQ}" "%{OUTPUTDIR}";fi;fi

#NOCOLORS=

# some scripts do not like to be Grouped/Folded. Use the -r to redefine it, like so:
# ./evidencer -r SEPARATE script1=serverlist1 script2=serverlist2
# The ! means that once set, it can not be overriden
ALIAS SEPARATE=GROUP!=0{,}FOLD!=0

# If you want to just run the RUN_POST script (because that processes your script output), then this nests Aliases:
ALIAS NOARG=RUN_ARG=
ALIAS NOPRE=RUN_PRE=
ALIAS NORUN=RUN=
ALIAS ~showonly=NORUN{,}NOPRE{,}NOARG
# The four lines could have been replaced by:
ALIAS ~ShowOnly=RUN_ARG={,}RUN_PRE={,}RUN=
# Be careful with aliases, if your scripts contain a substring equal to the alias (case sensitive), then it's replaced!
# use a leading / or UPPERCASE for aliases and lowercase for scripts.
# From the commandline try: ./evidencer -r NOARG,NOPRE,NORUN  ...
# From the commandline try: ./evidencer -r ~showonly  ...
# From the commandline try: ./evidencer -r ~ShowOnly  ...

# Example of an alias for the commandline (so it does not require the -r)
# This example runs test3 on VM-PR and then get.the.knife with the newest servers file (# is an alias to that)
ALIAS /go=&FOLD=0 &GROUP=0 &RUN= &ARG="SAD_SAD" test3=VM-PR  &RUN= get.the.knife=# 


ALIAS ~runseparate=&SEPARATE os.show.boottime=+ get.the.knife=+
ALIAS ~run=os.show.boottime=+ get.the.knife=+

# Let ssh-batch be less verbose when running.
# use as follows: ./evidencer /q get.the.knife=+   or as: ./evidencer -r /q get.the.knife=+
ALIAS /q=&SILENCE=--quiet
# use only as follows: ./evidencer -r /qq get.the.knife=+
ALIAS /qq=SILENCE=--quiet


# Undefine all actions except RUN_POST and RUN_END. This way, you can re-display the results 
# without fetching the data.
# Use it like: ./evidencer /show test=serverlist   (note that the order is important here)
# or like: ./evidencer test=serverlist -r /show    (order is not important, -r is always first)
ALIAS /show=&RUN!={,}&RUN_ARG!={,}&RUN_PRE!={,}&RUN_START!={,}&RUN_FINISH!={,}
# For this to work, your post action should be to display something.

## Sample ./scripts/POST
# OUTPUTLOG=$1
# RUNSERVERFQ=$2
# OUTPUTDIR=$3
# export svr=""
# # We cleanup the server list (could contain comments, jumphosts, or usernames)
# cat $RUNSERVERFQ | perl -pe 's/:.*|.*\^|.*\@//g' while read svr;do
#   cat "$OUTPUTDIR/$svr"' | grep -v -e '<ssh_askpass>' |perl -pe 's/^/$ENV{svr}':/'
# done
#
#

